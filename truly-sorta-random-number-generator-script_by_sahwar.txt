truly-sorta-random-number-generator-script_by_sahwar.txt

This is inspired by a similar idea that I read about many years ago.

1. Write a .sh script that automatically opens a background process that uses ffmpeg/libav to record short bursts/duration-periods (the duration can be changed by editing the `randomnum_mod.strngrc` file, which is an editable copy of the non-editable read-only default file `randomnum.strngrc` file) of background sound from the device's default sound-recording built-in internal-microphone system at (adjustable, but having some reasonable default numeric value set) regular intervals of linear time, and also simultaneously notifies the end-user about that activity taking place in the background - by a simple inotify notification message or by opening the end-user's default commandline Terminal app and its default shell (e.g. bash, or zsh, etc.) and `printf`-ing the notification message and the human-readable datetime stamp, and also printing the filepath/directory where the sound files are being saved in.
2. After some other pre-set (but, again, adjustable) span/duration of time, the shell script automatically invokes ffmpeg/libav and performs a simple merger (concatenation) of the several already generated audio-recordings files.
3. Then the script performs a tighter quantinization of the combined digital audio stream of the intermediary fused file, and spits out (i.e. dumps-generates) a new file which consists of a sequence of digits at a set maximum length and all appearing on a single line of plaintext.
4. The Terminal shell then appends the UNIX time-epoch sequence-of-digits datetime-stamps to the end of the generated number sequence after a selected mini-sequence of printable-ASCII punctuation characters and save the file thus newly formed as a new file with the name `{ISO8061-ASCII-datetime-stamp}_randomnum.txt`.
5. OPTIONAL: The user may supply some additional audio-transformation algorithm (or several consequtive such algorithms) to be performed on the merged audio-file before or after it is transformed into a numeric sequence by the steps being performed thus far...
6. The 'sorta truly random number generator' has spit(ted) the sorta truly random number sequence and you are ready to go! You may even use it as a dumb substitute to contemporary GnuOG .asc files or to the MD5 or GUUID algorithms, ahahaha!
The audio-speakers of the host OS play the final generated file at the end - just for fun and as a sort of audio-based time-stop live Internet webcam, ahahaha! Then the final number-sequence file is printed to stdout of the Terminal shell with an exit code of 0 (success) if no problems are present, or with an exit code of 1 (failure/error) if some error was encountered and the script couldn't finish for some reason or another (e.g. due to a lack of an active or present built-in internal microphone on the host machine/device/OS/computer-hardware, or due to almost no or no sound differences between the short audio-recordings to be merged inti the final merged audio-file.
7. Have fun & PROFIT?!? ðŸ™„ðŸ¤£ðŸ˜…
The script can be turned off by setting a simple key-value switch in the settings file `randomnum_mod.strng` to 'FALSE' instead of the default 'TRUE' or 'RESTART_ON_OS_SHUTDOWN_OR_REBOOT'...
