<!DOCTYPE html>
<html>
    <head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>
		Screwtape's Notepad
	</title>
        <link rel="stylesheet" href="combined.css">
    </head>
    <body>
	<header>
	    <h1>Screwtape's Notepad</h1>
	    <nav>
		<ul>
		    <li><a href="./">Home</a>
		    <li><a href="all_pages.html">All pages</a>
		</ul>
	    </nav>
	</header>
<h1 id="what-is-pymeta2">What is PyMeta2?<a class="headerlink" href="#what-is-pymeta2" title="Permanent link">&para;</a></h1>
<p>From <a href="http://www.allbuttonspressed.com/projects/pymeta">the homepage</a>:</p>
<blockquote>
<p>PyMeta 2 is a Python implementation of OMeta which is an object-oriented language for pattern matching, based on a variant of Parsing Expression Grammars (PEGs). It&rsquo;s a port of the old PyMeta implementation to the simplified OMeta 2 syntax.</p>
</blockquote>
<p>In more general terms, it&rsquo;s a Python module that helps you write code to parse structured text. Python comes with some built-in parsers like the <code>email</code> module for parsing email messages, the <code>csv</code> module for parsing CSV data, and the entire <code>xml</code> module hierarchy for parsing XML. PyMeta2 lets you go beyond those basic formats and allows you to easily create parsers for your own structured text formats.</p>
<h1 id="some-history">Some history<a class="headerlink" href="#some-history" title="Permanent link">&para;</a></h1>
<p><a href="http://tinlizzie.org/ometa/">OMeta</a> was originally invented by <a href="http://www.tinlizzie.org/~awarth/">Alessandro Warth</a>, with an implementation for Smalltalk. Several implementations for other languages appeared, including <a href="https://launchpad.net/pymeta">PyMeta</a>, an implementation for Python. Later, OMeta&rsquo;s basic syntax was streamlined a little to produce <a href="http://tinlizzie.org/ometa/ometa2.html">OMeta2</a>. PyMeta2 is a fork of PyMeta that updates it to support OMeta2 syntax.</p>
<h1 id="tutorial">Tutorial<a class="headerlink" href="#tutorial" title="Permanent link">&para;</a></h1>
<h2 id="installation">Installation<a class="headerlink" href="#installation" title="Permanent link">&para;</a></h2>
<p>First, download the PyMeta2 source archive from <a href="http://www.allbuttonspressed.com/projects/pymeta">the homepage</a> and extract it. Install it the same way you&rsquo;d install any other Python module:</p>
<div class="codehilite"><pre><span></span>cd pymeta
python setup.py install
</pre></div>


<p>Check it&rsquo;s been installed correctly by running:</p>
<div class="codehilite"><pre><span></span><span class="n">python</span> <span class="o">-</span><span class="n">c</span> <span class="s2">&quot;import pymeta; print &#39;OK&#39;&quot;</span>
</pre></div>


<p>If that command displays &ldquo;OK&rdquo;, then PyMeta2 is installed correctly. Otherwise, there&rsquo;ll be an error message you can investigate.</p>
<h2 id="first-steps">First steps<a class="headerlink" href="#first-steps" title="Permanent link">&para;</a></h2>
<p>At its most basic, OMeta2 is a language designed to describe structured text. For example, here is an OMeta2 grammar that recognises dates in ISO8601 format (YYYY-MM-DD):</p>
<div class="codehilite"><pre><span></span><span class="k">grammar</span> = <span class="n">digit</span> <span class="n">digit</span> <span class="n">digit</span> <span class="n">digit</span> <span class="s">&quot;-&quot;</span> <span class="n">digit</span> <span class="n">digit</span> <span class="s">&quot;-&quot;</span> <span class="n">digit</span> <span class="n">digit</span>
</pre></div>


<p>The format is defined to be four digits, followed by a hyphen, then two digits, another hyphen and two more digits. There&rsquo;s a few things to notice here:</p>
<ul>
<li>OMeta2 requires that the top-level grammar rule be given the name &ldquo;grammar&rdquo;. That&rsquo;s just overhead in this example, but being able to name rules helps you re-use parts of more complicated grammars.</li>
<li>Ordinary words in OMeta2 are used to reference other rules (&ldquo;digit&rdquo; is a built-in rule that recognises any decimal digit), while literal characters need to be wrapped in quotes.</li>
<li>Because of the previous point, whitespace in an OMeta2 grammar is generally ignorable.</li>
</ul>
<h2 id="multiple-rules">Multiple Rules<a class="headerlink" href="#multiple-rules" title="Permanent link">&para;</a></h2>
<p>Here&rsquo;s a more complicated example: let&rsquo;s say we want to identify strings that represent unsigned integers, either in octal, decimal, or hexadecimal. </p>
<p>In English, the rules might look like this:</p>
<ul>
<li>A hexadecimal integer begins with &ldquo;0x&rdquo;, followed by one or more hexadecimal digits.</li>
<li>An octal integer begins with &ldquo;0&rdquo;, and then one or more octal digits.</li>
<li>A decimal integer is any string of one or more decimal digits.</li>
<li>An unsigned integer is either a hexadecimal  integer, an octal integer, or a decimal integer.</li>
</ul>
<p>In OMeta2, this could be written:</p>
<div class="codehilite"><pre><span></span>hexDigit = (digit|&quot;A&quot;|&quot;B&quot;|&quot;C&quot;|&quot;D&quot;|&quot;E&quot;|&quot;F&quot;)
hexInt = &quot;0x&quot; hexDigit+

octDigit = (&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;)
octInt = &quot;0&quot; octDigit+

decInt = digit+

grammar = (hexInt | octInt | decInt)
</pre></div>


<p>More things to notice:</p>
<ul>
<li>Brackets (&ldquo;(&rdquo; and &ldquo;)&rdquo;) are grouping symbols.</li>
<li>The vertical bar (&ldquo;|&rdquo;) is the alternate operator, and means that the pattern as a whole matches if either side of the bar matches.</li>
<li>A plus (&ldquo;+&rdquo;) written after a pattern means that the pattern should occur one or more times.</li>
<li>A star (&ldquo;*&rdquo;) written after a pattern means that the pattern should occur zero or more times.</li>
<li>You can break a complicated grammar into separate rules, and combine them in different ways.</li>
<li>It&rsquo;s important that <code>octInt</code> comes before <code>decInt</code>. Otherwise, the grammar would never recognise an octal integer because any octal integer also matches the <code>decInt</code> rule.</li>
</ul>
<h2 id="parsing-with-python">Parsing with Python<a class="headerlink" href="#parsing-with-python" title="Permanent link">&para;</a></h2>
<p>Writing a grammar in OMeta2 is an interesting exercise, but not very useful until Python can use it to parse with. Here&rsquo;s how to use the PyMeta2 API to recognise a particular grammar:</p>
<table class="codehilitetable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></div></td><td class="code"><div class="codehilite"><pre><span></span><span class="c1"># Import the PyMeta2 APIs we need.</span>
<span class="kn">from</span> <span class="nn">pymeta.grammar</span> <span class="kn">import</span> <span class="n">OMeta</span>
<span class="kn">from</span> <span class="nn">pymeta.runtime</span> <span class="kn">import</span> <span class="n">ParseError</span>

<span class="c1"># This the OMeta2 description of the grammar we</span>
<span class="c1"># want to parse.</span>
<span class="n">definition</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;</span>
<span class="s2">hexDigit = (digit|&quot;A&quot;|&quot;B&quot;|&quot;C&quot;|&quot;D&quot;|&quot;E&quot;|&quot;F&quot;)</span>
<span class="s2">hexInt = &quot;0x&quot; hexDigit+</span>

<span class="s2">octDigit = (&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;)</span>
<span class="s2">octInt = &quot;0&quot; octDigit+</span>

<span class="s2">decInt = digit+</span>

<span class="s2">grammar = (hexInt | octInt | decInt)</span>
<span class="s2">&quot;&quot;&quot;</span>

<span class="c1"># Make a Grammar class that knows how to parse </span>
<span class="c1"># strings according to the rules we&#39;ve defined.</span>
<span class="c1"># The empty dictionary parameter is required, but</span>
<span class="c1"># can be ignored for now.</span>
<span class="n">Grammar</span> <span class="o">=</span> <span class="n">OMeta</span><span class="o">.</span><span class="n">makeGrammar</span><span class="p">(</span><span class="n">definition</span><span class="p">,</span> <span class="p">{})</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">text</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s2">&quot;Enter some text to parse: &quot;</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">Grammar</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&quot;OK&quot;</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">ParseError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">print</span> <span class="n">e</span>
</pre></div>
</td></tr></table>

<p>Things to notice:</p>
<ul>
<li>The <code>OMeta</code> class is the main interface to PyMeta2.</li>
<li>The <code>.makeGrammar()</code> class method parses the definition you give it, and constructs a new subclass of <code>OMeta</code> that includes the grammar rules from your definition.</li>
<li>Grammar classes constructed by <code>.makeGrammar()</code> have a <code>.parse()</code> class method that take a string to parse, and try to parse it using the rule named <code>grammar</code>.</li>
<li>If the input text does not match the grammar, a <code>ParseError</code> exception will be raised, which prints a pretty message to indicate where the problem occurred.</li>
</ul>
<h2 id="a-wrinkle-trailing-characters">A wrinkle: trailing characters<a class="headerlink" href="#a-wrinkle-trailing-characters" title="Permanent link">&para;</a></h2>
<p>If you run the code above, you can play with the grammar, entering various things to see if they will be recognised as strings or not. Here&rsquo;s some sample output:</p>
<div class="codehilite"><pre><span></span>Enter some text to parse: 0
OK
Enter some text to parse: 1
OK
Enter some text to parse: 1234
OK
Enter some text to parse: 01234
OK
Enter some text to parse: 0x1234
OK
Enter some text to parse: sasquatch

sasquatch
^
Parse error at line 1, column 0:
</pre></div>


<p>So far, that&rsquo;s exactly what we expect! But here&rsquo;s another test: digits 8 and 9 aren&rsquo;t allowed in octal numbers, so what happens if we try to use one?</p>
<div class="codehilite"><pre><span></span>Enter some text to parse: 02468
OK
</pre></div>


<p>That&rsquo;s not what we wanted at all!</p>
<p>It turns out that PyMeta2 is recognising <code>0246</code> as a valid octal integer, and then stopping. To instruct it that after parsing an integer we should be at the end of the string, there&rsquo;s a special pattern named <code>end</code>. In the Python source, change the <code>grammar</code> rule so it looks like this:</p>
<div class="codehilite"><pre><span></span><span class="k">grammar</span> = (<span class="n">hexInt</span> | <span class="n">octInt</span> | <span class="n">decInt</span>) <span class="nb">end</span>
</pre></div>


<p>&hellip;and try running the code again. This time we get a different response:</p>
<div class="codehilite"><pre><span></span>Enter some text to parse: 02468

02468
    ^
Parse error at line 1, column 4: expected one of string &#39;7&#39;,
string &#39;2&#39;, string &#39;6&#39;, string &#39;1&#39;, string &#39;5&#39;, string &#39;0&#39;,
string &#39;4&#39;, or string &#39;3&#39;
</pre></div>


<p>Now we get a parse error just like we expected, with a helpful error message as well!</p>
<h2 id="labels-and-values">Labels and values<a class="headerlink" href="#labels-and-values" title="Permanent link">&para;</a></h2>
<p>Just recognising that a string contains an integer is one thing, but it would be helpful to know which integer it is. OMeta2 helps us here, too, with the Label (&ldquo;:&rdquo;) and Rule Value (&ldquo;-&gt;&rdquo;) operators.</p>
<p>Inside a rule, you can put <code>:</code> after a particular pattern, followed by a name, to label the characters that pattern matches with the given name. Then, you can put <code>-&gt;</code> at the end of the rule followed by a Python expression. Whenever the rule is matched, the expression is evaluated, and whatever it returns becomes the &ldquo;value&rdquo; of the rule — hence the name &ldquo;Rule Value&rdquo;.</p>
<p>As an example, let&rsquo;s modify the <code>hexInt</code> rule in the previous example:</p>
<div class="codehilite"><pre><span></span>hexInt = &quot;0x&quot; hexDigit+:d -&gt; int(&quot;&quot;.join(d), 16)
</pre></div>


<p>Here, we&rsquo;ve added &ldquo;:d&rdquo; after the pattern that matches the digits. Because that pattern matches a variable number of digits, <code>d</code> will contain a Python list of the digits that pattern matched, in order.</p>
<p>We&rsquo;ve also added the Rule Value operator <code>-&gt;</code>, and a Python expression. Because <code>d</code> contains a list, we use the <code>.join()</code> method to join all the characters into a single string, then pass that string to the Python <code>int()</code> function to create an integer (in base 16, hexadecimal).</p>
<p>We can modify the rules for <code>octInt</code> and <code>decInt</code> in the same way (although we need to specify base 8 for octal, and don&rsquo;t need to specify a base for decimal). We also need to modify the top-level <code>grammar</code> rule, so that it returns the value from the integer-parsing rules it calls, so the final result looks like this:</p>
<div class="codehilite"><pre><span></span>hexDigit = (digit|&quot;A&quot;|&quot;B&quot;|&quot;C&quot;|&quot;D&quot;|&quot;E&quot;|&quot;F&quot;)
hexInt = &quot;0x&quot; hexDigit+:d -&gt; int(&quot;&quot;.join(d), 16)

octDigit = (&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;)
octInt = &quot;0&quot; octDigit+:d -&gt; int(&quot;&quot;.join(d), 8)

decInt = digit+:d -&gt; int(&quot;&quot;.join(d))

grammar = (octInt | hexInt | decInt):i end -&gt; i
</pre></div>


<p>In order to see the result, we&rsquo;ll have to amend our Python code to print the value that <code>.parse()</code> returns, like this:</p>
<p>The entire program now looks like this:</p>
<table class="codehilitetable"><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></div></td><td class="code"><div class="codehilite"><pre><span></span><span class="c1"># Import the PyMeta2 APIs we need.</span>
<span class="kn">from</span> <span class="nn">pymeta.grammar</span> <span class="kn">import</span> <span class="n">OMeta</span>
<span class="kn">from</span> <span class="nn">pymeta.runtime</span> <span class="kn">import</span> <span class="n">ParseError</span>

<span class="c1"># This the OMeta2 description of the grammar we</span>
<span class="c1"># want to parse.</span>
<span class="n">definition</span> <span class="o">=</span> <span class="s2">&quot;&quot;&quot;</span>
<span class="s2">hexDigit = (digit|&quot;A&quot;|&quot;B&quot;|&quot;C&quot;|&quot;D&quot;|&quot;E&quot;|&quot;F&quot;)</span>
<span class="s2">hexInt = &quot;0x&quot; hexDigit+:d -&gt; int(&quot;&quot;.join(d), 16)</span>

<span class="s2">octDigit = (&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;)</span>
<span class="s2">octInt = &quot;0&quot; octDigit+:d -&gt; int(&quot;&quot;.join(d), 8)</span>

<span class="s2">decInt = digit+:d -&gt; int(&quot;&quot;.join(d))</span>

<span class="s2">grammar = (octInt | hexInt | decInt):i end -&gt; i</span>
<span class="s2">&quot;&quot;&quot;</span>

<span class="c1"># Make a Grammar class that knows how to parse </span>
<span class="c1"># strings according to the rules we&#39;ve defined.</span>
<span class="c1"># The empty dictionary parameter is required, but</span>
<span class="c1"># can be ignored for now.</span>
<span class="n">Grammar</span> <span class="o">=</span> <span class="n">OMeta</span><span class="o">.</span><span class="n">makeGrammar</span><span class="p">(</span><span class="n">definition</span><span class="p">,</span> <span class="p">{})</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">text</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">(</span><span class="s2">&quot;Enter some text to parse: &quot;</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">print</span> <span class="n">Grammar</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">ParseError</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">print</span> <span class="n">e</span>
</pre></div>
</td></tr></table>

<p>And here it is in action:</p>
<div class="codehilite"><pre><span></span>Enter some text to parse: 0
0
Enter some text to parse: 1
1
Enter some text to parse: 1234
1234
Enter some text to parse: 01234
668
Enter some text to parse: 0x1234
4660
</pre></div>


<h2 id="other-stuff">Other Stuff<a class="headerlink" href="#other-stuff" title="Permanent link">&para;</a></h2>
<p>Semantic predicates and actions<br>
The not and lookahead operators (<code>~</code>, <code>~~</code>)<br>
List patterns?<br>
Grammar inheritance?<br>
Grammar globals?<br>
Characters versus strings?<br>
The OMeta2 grammar for OMeta2<br>
Why does OMeta2 have number syntax?</p>
<h1 id="reference">Reference<a class="headerlink" href="#reference" title="Permanent link">&para;</a></h1>
<h2 id="literals">Literals<a class="headerlink" href="#literals" title="Permanent link">&para;</a></h2>
<h3 id="strings-and-characters">Strings and characters<a class="headerlink" href="#strings-and-characters" title="Permanent link">&para;</a></h3>
<p>Quoting, backslash escapes</p>
<h3 id="numbers">Numbers<a class="headerlink" href="#numbers" title="Permanent link">&para;</a></h3>
<p>Signed decimal, octal and hex numbers</p>
<h2 id="operators">Operators<a class="headerlink" href="#operators" title="Permanent link">&para;</a></h2>
<h3 id="alternate">Alternate (|)<a class="headerlink" href="#alternate" title="Permanent link">&para;</a></h3>
<p>This pattern matches the input if either the left-hand side or the right-hand side matches the input.</p>
<p>Example usage:</p>
<div class="codehilite"><pre><span></span>&#39;a&#39; | &#39;b&#39;
</pre></div>


<p>This pattern matches the input &ldquo;a&rdquo; and also the input &ldquo;b&rdquo;.</p>
<h3 id="label">Label (:)<a class="headerlink" href="#label" title="Permanent link">&para;</a></h3>
<p>Used after a pattern, this gives a name to the pattern that can be used in the expression after the Rule Value operator.</p>
<p>Example usage:</p>
<div class="codehilite"><pre><span></span><span class="n">number</span><span class="o">:</span><span class="n">real</span> <span class="s1">&#39;+&#39;</span> <span class="n">number</span><span class="o">:</span><span class="n">imag</span> <span class="s1">&#39;i&#39;</span> <span class="o">-&gt;</span> <span class="n">complex</span><span class="o">(</span><span class="n">real</span><span class="o">,</span> <span class="n">imag</span><span class="o">)</span>
</pre></div>


<p>Assuming <code>number</code> is a rule that matches a number and returns a Python numeric value, this pattern matches expressions like &ldquo;1+3i&rdquo; or &ldquo;7+4i&rdquo; and labels the first number <code>real</code> and the second number <code>imag</code>. Those labels are then available to the Python expression after the Rule Value operator.</p>
<h3 id="lookahead">Lookahead (~~)<a class="headerlink" href="#lookahead" title="Permanent link">&para;</a></h3>
<p>Used before a pattern, this matches the input if the following pattern would match, but doesn&rsquo;t actually consume the matched bytes.</p>
<p>Example usage:</p>
<div class="codehilite"><pre><span></span>~~sign numeric
</pre></div>


<p>Assuming there is a <code>sign</code> rule that matches <code>+</code> or <code>-</code>, and a <code>numeric</code> rule that has an optional sign, this pattern requires the sign to be present but the actual interpretation of the sign character is done in the <code>numeric</code> rule.</p>
<h3 id="many">Many (*)<a class="headerlink" href="#many" title="Permanent link">&para;</a></h3>
<p>Used after a pattern, this matches the input if the preceding pattern occurs zero or more times.</p>
<p>Example usage:</p>
<div class="codehilite"><pre><span></span>&#39;a&#39;* &#39;b&#39;
</pre></div>


<p>This pattern matches the inputs &ldquo;b&rdquo;, &ldquo;ab&rdquo;, &ldquo;aab&rdquo;, &ldquo;aaab&rdquo;, and so forth.</p>
<h3 id="not">Not (~)<a class="headerlink" href="#not" title="Permanent link">&para;</a></h3>
<p>Used before a pattern, this matches the input if the following pattern would not match, but doesn&rsquo;t actually consume the bytes that don&rsquo;t match.</p>
<p>Example usage:</p>
<div class="codehilite"><pre><span></span>~&quot;0x&quot; integer
</pre></div>


<p>Assuming there is an <code>integer</code> rule that matches hexadecimal literals (that start with &ldquo;0x&rdquo;) as well as decimal literals, this pattern will re-use the logic in the <code>integer</code> rule while only accepting decimals.</p>
<p>Note: A common idiom in parsing is a pattern that ends at the first occurrence of some particular byte - for example, a comment that extends until the end of a line, or string literals that start and end with a quote character. If you&rsquo;re familiar with regular expressions, it&rsquo;s tempting to write a pattern like this:</p>
<div class="codehilite"><pre><span></span>&#39;&quot;&#39; (~&#39;&quot;&#39;)* &#39;&quot;&#39;
</pre></div>


<p>&hellip;but this won&rsquo;t work, because the <code>~</code> operator doesn&rsquo;t consume the bytes it examines. The way to do this in OMeta2 is to add the <code>anything</code> rule like this:</p>
<div class="codehilite"><pre><span></span>&#39;&quot;&#39; (~&#39;&quot;&#39; anything)* &#39;&quot;&#39;
</pre></div>


<p>The <code>anything</code> rule will match any single character, but because we&rsquo;ve already checked that it&rsquo;s not a double quote, the overall effect of the pattern inside the brackets is &ldquo;any character that&rsquo;s not a quote&rdquo;.</p>
<h3 id="one-or-more">One or More (+)<a class="headerlink" href="#one-or-more" title="Permanent link">&para;</a></h3>
<p>Used after a pattern, this matches the input if the preceding pattern occurs one or more times.</p>
<p>Example usage:</p>
<div class="codehilite"><pre><span></span>&#39;a&#39;+ &#39;b&#39;
</pre></div>


<p>This pattern matches the inputs &ldquo;ab&rdquo;, &ldquo;aab&rdquo;, &ldquo;aaab&rdquo; and so forth, but <em>not</em> &ldquo;b&rdquo;.</p>
<h3 id="optional">Optional (?)<a class="headerlink" href="#optional" title="Permanent link">&para;</a></h3>
<p>Used after a pattern, this matches the input if the preceding pattern occurs zero or one time.</p>
<p>Example usage:</p>
<div class="codehilite"><pre><span></span>&#39;a&#39;? &#39;b&#39;
</pre></div>


<p>This pattern matches the inputs &ldquo;b&rdquo; and &ldquo;ab&rdquo;, but not &ldquo;aab&rdquo;, &ldquo;aaab&rdquo;, etc.</p>
<h3 id="rule-value-">Rule Value (-&gt;)<a class="headerlink" href="#rule-value-" title="Permanent link">&para;</a></h3>
<p>Used after a pattern, it is followed by a Python expression that is evaluated when the pattern is matched. The result of the expression is used as the value of the pattern, which can be used by the Label and Rule Value operators in rules that call this one. The value of the top-level <code>grammar</code> rule is the value returned by the Grammar object&rsquo;s <code>.parse()</code> method.</p>
<p>When evaluated, the expression can refer to all the sub-patterns with labels, as well as the contents of the dictionary that was passed to the <code>.makeGrammar()</code> method. when the grammar was compiled.</p>
<p>For a usage example, see the Label operator above.</p>
<h3 id="semantic-action">Semantic Action (!())<a class="headerlink" href="#semantic-action" title="Permanent link">&para;</a></h3>
<h3 id="semantic-predicate">Semantic Predicate (?())<a class="headerlink" href="#semantic-predicate" title="Permanent link">&para;</a></h3>
<h2 id="built-in-rules">Built-in Rules<a class="headerlink" href="#built-in-rules" title="Permanent link">&para;</a></h2>
<p>There&rsquo;s a bunch of built-in rules you can use that address common parsing needs.</p>
<h3 id="anything">anything<a class="headerlink" href="#anything" title="Permanent link">&para;</a></h3>
<p>Matches any single character.</p>
<h3 id="spaces">spaces<a class="headerlink" href="#spaces" title="Permanent link">&para;</a></h3>
<p>Matches zero or more whitespace characters, as defined by Python&rsquo;s <code>str.isspace()</code> method.</p>
<h3 id="end">end<a class="headerlink" href="#end" title="Permanent link">&para;</a></h3>
<p>Matches if the parser is at the end of the string being parsed.</p>
<h3 id="tokenc">token(c)<a class="headerlink" href="#tokenc" title="Permanent link">&para;</a></h3>
<p>Identical to:</p>
<div class="codehilite"><pre><span></span>spaces c
</pre></div>


<p>Note: <code>c</code> must be a Python string literal, with either single or double quotes. It is matched character-wise against the input stream.</p>
<h3 id="letter">letter<a class="headerlink" href="#letter" title="Permanent link">&para;</a></h3>
<p>Matches any single letter, as defined by Python&rsquo;s <code>str.isalpha()</code> method.</p>
<h3 id="letterordigit">letterOrDigit<a class="headerlink" href="#letterordigit" title="Permanent link">&para;</a></h3>
<p>Matches any single alphanumeric character, as defined by Python&rsquo;s <code>str.isalnum()</code> method.</p>
<h3 id="digit">digit<a class="headerlink" href="#digit" title="Permanent link">&para;</a></h3>
<p>Matches any single decimal digit, as defined by Python&rsquo;s <code>str.isdigit()</code> method.</p>    </body>
</html>
